{"ast":null,"code":"import { HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst baseUrl = `${environment.apiUrl}/departments`;\nexport let DepartmentService = /*#__PURE__*/(() => {\n  class DepartmentService {\n    constructor(http) {\n      this.http = http;\n      // Local cache of departments to speed up loading\n      this.departmentsCache = [];\n    }\n    getAll(options) {\n      // Fast return option will immediately return cached data\n      if (options?.fastReturn && this.departmentsCache.length > 0) {\n        console.log(\"Using cached departments data\");\n        return of(this.departmentsCache);\n      }\n      // If we have cached departments, return them immediately\n      if (this.departmentsCache.length > 0) {\n        // Return cache immediately but still refresh in background\n        const cached = of(this.departmentsCache);\n        // Refresh cache in background\n        this.refreshDepartmentsCache();\n        return cached;\n      }\n      // Cache is empty, do a full fetch\n      return this.http.get(baseUrl).pipe(tap(departments => console.log('Fetched departments:', departments)), map(departments => {\n        this.departmentsCache = departments; // Cache the results\n        return departments;\n      }), catchError(this.handleError));\n    }\n    // Background refresh function \n    refreshDepartmentsCache() {\n      this.http.get(baseUrl).pipe(map(departments => {\n        this.departmentsCache = departments;\n        console.log('Departments cache refreshed in background');\n      }), catchError(error => {\n        console.error('Background refresh failed:', error);\n        return of(null);\n      })).subscribe();\n    }\n    getById(id) {\n      // If we have the department in cache, return it immediately\n      const cachedDept = this.departmentsCache.find(d => d.id === parseInt(id));\n      if (cachedDept) {\n        return of(cachedDept);\n      }\n      // Not in cache, fetch from API\n      return this.http.get(`${baseUrl}/${id}`).pipe(tap(department => console.log('Fetched department by ID:', department)), catchError(this.handleError));\n    }\n    create(department) {\n      // Clear the cache on create to force a refresh\n      this.departmentsCache = [];\n      console.log('Department service creating department:', department);\n      // Add headers to ensure proper content type\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      // Ensure we only send data the API expects\n      const departmentData = {\n        name: department.name,\n        description: department.description\n      };\n      // Log the exact request data being sent\n      console.log('Sending department creation request with data:', JSON.stringify(departmentData));\n      return this.http.post(baseUrl, departmentData, httpOptions).pipe(tap(newDepartment => console.log('Created department:', newDepartment)), catchError(error => {\n        console.error('Department creation error:', error);\n        // Inspect the error in detail\n        if (error instanceof HttpErrorResponse) {\n          console.error('Status:', error.status);\n          console.error('Status text:', error.statusText);\n          console.error('URL:', error.url);\n          console.error('Error body:', error.error);\n          console.error('Error type:', error.name);\n        }\n        return this.handleError(error);\n      }));\n    }\n    update(id, department) {\n      // Clear the cache on update to force a refresh\n      this.departmentsCache = [];\n      // Make sure we send exactly what the API expects\n      const departmentData = {\n        name: department.name,\n        description: department.description\n      };\n      return this.http.put(`${baseUrl}/${id}`, departmentData).pipe(tap(updatedDepartment => console.log('Updated department:', updatedDepartment)), catchError(this.handleError));\n    }\n    delete(id) {\n      // Clear the cache on delete to force a refresh\n      this.departmentsCache = [];\n      return this.http.delete(`${baseUrl}/${id}`).pipe(tap(() => console.log('Deleted department ID:', id)), catchError(this.handleError));\n    }\n    // Improved error handler\n    handleError(error) {\n      console.error('API Error:', error);\n      if (error.error instanceof ErrorEvent) {\n        // Client-side error\n        console.error('Client error:', error.error.message);\n        return throwError(() => ({\n          message: `Client error: ${error.error.message}`\n        }));\n      } else {\n        // Server-side error\n        console.error(`Server error: ${error.status} ${error.statusText}`);\n        console.error('Error body:', error.error);\n        let errorMessage;\n        if (error.error?.message) {\n          errorMessage = error.error.message;\n        } else if (error.status === 0) {\n          errorMessage = 'Cannot connect to server. Please check your internet connection or try again later.';\n        } else {\n          errorMessage = `Server error: ${error.status} ${error.statusText || 'Unknown error'}`;\n        }\n        return throwError(() => ({\n          message: errorMessage\n        }));\n      }\n    }\n    static {\n      this.ɵfac = function DepartmentService_Factory(t) {\n        return new (t || DepartmentService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: DepartmentService,\n        factory: DepartmentService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return DepartmentService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}