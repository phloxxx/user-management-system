{"ast":null,"code":"import { HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let DebugInterceptor = /*#__PURE__*/(() => {\n  class DebugInterceptor {\n    intercept(request, next) {\n      // Log detailed request information\n      console.log('-------------------------');\n      console.log('DEBUG REQUEST:');\n      console.log(`URL: ${request.url}`);\n      console.log(`Method: ${request.method}`);\n      if (request.headers.has('Authorization')) {\n        const authHeader = request.headers.get('Authorization');\n        console.log(`Auth Header: ${authHeader.substring(0, 15)}...`);\n        // Decode JWT token if present\n        if (authHeader && authHeader.startsWith('Bearer ')) {\n          const token = authHeader.substring(7);\n          try {\n            const parts = token.split('.');\n            if (parts.length === 3) {\n              const decoded = JSON.parse(atob(parts[1]));\n              console.log('Token payload:', decoded);\n              console.log('Token expiration:', new Date(decoded.exp * 1000).toISOString());\n              console.log('Current time:', new Date().toISOString());\n              console.log('Token expired:', new Date(decoded.exp * 1000) < new Date());\n            }\n          } catch (e) {\n            console.log('Could not decode token', e);\n          }\n        }\n      } else {\n        console.log('No Authorization header present');\n      }\n      console.log(`Body:`, request.body);\n      console.log('-------------------------');\n      return next.handle(request).pipe(tap({\n        next: event => {\n          if (event instanceof HttpResponse) {\n            console.log('-------------------------');\n            console.log('DEBUG RESPONSE:');\n            console.log(`URL: ${request.url}`);\n            console.log(`Status: ${event.status}`);\n            console.log(`Body:`, event.body);\n            console.log('-------------------------');\n          }\n        },\n        error: error => {\n          if (error instanceof HttpErrorResponse) {\n            console.log('-------------------------');\n            console.log('DEBUG ERROR RESPONSE:');\n            console.log(`URL: ${request.url}`);\n            console.log(`Status: ${error.status}`);\n            console.log(`Error message: ${error.message}`);\n            console.log(`Error details:`, error.error);\n            console.log('-------------------------');\n          }\n        }\n      }));\n    }\n    static {\n      this.ɵfac = function DebugInterceptor_Factory(t) {\n        return new (t || DebugInterceptor)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: DebugInterceptor,\n        factory: DebugInterceptor.ɵfac\n      });\n    }\n  }\n  return DebugInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}