{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(accountService) {\n      this.accountService = accountService;\n    }\n    intercept(request, next) {\n      return next.handle(request).pipe(catchError(err => {\n        // Only log out for auth-related endpoints returning 401\n        const isAuthEndpoint = request.url.includes('/authenticate') || request.url.includes('/refresh-token');\n        if (err.status === 401 && this.accountService.accountValue) {\n          if (isAuthEndpoint || request.url.includes('/revoke-token')) {\n            // Auto logout if authentication endpoints fail with 401\n            console.log('Authentication failed, logging out');\n            this.accountService.logout();\n          } else {\n            // For other API endpoints, try to refresh the token first\n            console.log('API call returned 401, attempting to refresh token');\n            this.accountService.refreshToken().subscribe({\n              error: () => {\n                // If refresh fails, then logout\n                console.log('Token refresh failed, logging out');\n                this.accountService.logout();\n              }\n            });\n          }\n        } else if (err.status === 403 && this.accountService.accountValue) {\n          // For 403 Forbidden errors, don't log out but show access denied message\n          console.log('Access forbidden to resource');\n        }\n        const error = err && err.error && err.error.message || err.statusText;\n        console.error('API error:', err);\n        return throwError(error);\n      }));\n    }\n    static {\n      this.ɵfac = function ErrorInterceptor_Factory(t) {\n        return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.AccountService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ErrorInterceptor,\n        factory: ErrorInterceptor.ɵfac\n      });\n    }\n  }\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}