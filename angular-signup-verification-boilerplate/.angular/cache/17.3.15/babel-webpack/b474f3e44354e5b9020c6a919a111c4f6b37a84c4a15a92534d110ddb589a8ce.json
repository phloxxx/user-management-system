{"ast":null,"code":"import { first } from 'rxjs/operators';\nimport { forkJoin } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@app/_services/employee.service\";\nimport * as i3 from \"@app/_services/department.service\";\nimport * as i4 from \"@app/_services/workflow.service\";\nimport * as i5 from \"@app/_services\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/forms\";\nfunction TransferComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.errorMessage);\n  }\n}\nfunction TransferComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵtext(1, \" You must select a different department than the current one. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TransferComponent_option_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const dept_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"value\", dept_r2.id)(\"disabled\", dept_r2.id === (ctx_r0.employee == null ? null : ctx_r0.employee.departmentId));\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate2(\" \", dept_r2.name, \" \", dept_r2.id === (ctx_r0.employee == null ? null : ctx_r0.employee.departmentId) ? \"(Current)\" : \"\", \" \");\n  }\n}\nexport let TransferComponent = /*#__PURE__*/(() => {\n  class TransferComponent {\n    constructor(router, route, employeeService, departmentService, workflowService, alertService) {\n      this.router = router;\n      this.route = route;\n      this.employeeService = employeeService;\n      this.departmentService = departmentService;\n      this.workflowService = workflowService;\n      this.alertService = alertService;\n      this.employee = {};\n      this.departments = [];\n      this.currentDepartmentName = '';\n    }\n    ngOnInit() {\n      this.id = this.route.snapshot.params['id'];\n      // Load both employee and department data in parallel\n      forkJoin({\n        employee: this.employeeService.getById(this.id),\n        departments: this.departmentService.getAll()\n      }).pipe(first()).subscribe({\n        next: ({\n          employee,\n          departments\n        }) => {\n          this.employee = employee;\n          this.departments = departments;\n          // Set the current department name with better error handling\n          if (employee && employee.departmentId) {\n            const currentDept = departments.find(d => Number(d.id) === Number(employee.departmentId));\n            if (currentDept) {\n              this.currentDepartmentName = currentDept.name;\n              console.log(`Current department set to: ${this.currentDepartmentName} (ID: ${employee.departmentId})`);\n            } else {\n              console.error(`Department with ID ${employee.departmentId} not found in the departments list:`, departments);\n              this.currentDepartmentName = `Unknown (ID: ${employee.departmentId})`;\n              // Attempt to fetch the specific department directly as a fallback\n              this.departmentService.getById(employee.departmentId.toString()).pipe(first()).subscribe({\n                next: department => {\n                  if (department) {\n                    this.currentDepartmentName = department.name;\n                    console.log(`Retrieved department name: ${department.name}`);\n                  }\n                },\n                error: error => console.error('Error fetching department:', error)\n              });\n            }\n            // Initialize newDepartmentId with a different department to prevent same-department transfer\n            this.newDepartmentId = this.findDifferentDepartment(employee.departmentId);\n            // Log for debugging\n            console.log(`Current department ID: ${employee.departmentId}, Selected new department ID: ${this.newDepartmentId}`);\n          } else {\n            console.warn('Employee has no department ID assigned');\n            this.currentDepartmentName = 'No Department Assigned';\n          }\n        },\n        error: error => {\n          this.errorMessage = 'Could not load employee or department data';\n          console.error('Error loading data:', error);\n        }\n      });\n    }\n    // Find a department ID that's different from the employee's current one\n    findDifferentDepartment(currentDeptId) {\n      if (this.departments.length > 0) {\n        // First try to find a different department than current\n        const differentDept = this.departments.find(d => Number(d.id) !== Number(currentDeptId));\n        if (differentDept) {\n          return differentDept.id;\n        }\n        // If not found (unlikely), return null\n        return null;\n      }\n      return null;\n    }\n    // Transfer the employee\n    transfer() {\n      // Validate\n      if (!this.newDepartmentId) {\n        this.errorMessage = 'Please select a new department';\n        return;\n      }\n      // Convert to numbers for accurate comparison\n      const currentDeptId = Number(this.employee.departmentId);\n      const newDeptId = Number(this.newDepartmentId);\n      if (currentDeptId === newDeptId) {\n        this.errorMessage = 'Cannot transfer to the same department. Please select a different department.';\n        return;\n      }\n      // Get department names for the workflow details\n      const fromDept = this.currentDepartmentName;\n      const toDept = this.departments.find(d => Number(d.id) === newDeptId)?.name || 'New Department';\n      // Clear any previous error message\n      this.errorMessage = '';\n      // First update the employee\n      this.employeeService.update(this.id, {\n        ...this.employee,\n        departmentId: this.newDepartmentId\n      }).pipe(first()).subscribe({\n        next: updatedEmployee => {\n          console.log(\"Employee department updated successfully\");\n          // Now create a workflow for this transfer\n          const workflowDetails = {\n            employeeId: parseInt(this.id),\n            type: 'Transfer',\n            details: {\n              from: fromDept,\n              to: toDept\n            },\n            status: 'Pending'\n          };\n          // Create workflow record\n          this.workflowService.create(workflowDetails).pipe(first()).subscribe({\n            next: () => {\n              this.alertService.success('Employee transferred successfully', {\n                keepAfterRouteChange: true\n              });\n              this.router.navigate(['/admin/employees']);\n            },\n            error: error => {\n              console.error('Error creating workflow:', error);\n              // Continue even if workflow creation fails\n              this.alertService.success('Employee transferred successfully but workflow creation failed', {\n                keepAfterRouteChange: true\n              });\n              this.router.navigate(['/admin/employees']);\n            }\n          });\n        },\n        error: error => {\n          this.errorMessage = 'Could not transfer employee: ' + (error.message || error);\n          console.error('Error transferring employee:', error);\n        }\n      });\n    }\n    static {\n      this.ɵfac = function TransferComponent_Factory(t) {\n        return new (t || TransferComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.EmployeeService), i0.ɵɵdirectiveInject(i3.DepartmentService), i0.ɵɵdirectiveInject(i4.WorkflowService), i0.ɵɵdirectiveInject(i5.AlertService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: TransferComponent,\n        selectors: [[\"app-transfer\"]],\n        decls: 25,\n        vars: 7,\n        consts: [[1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [\"class\", \"alert alert-warning\", 4, \"ngIf\"], [1, \"mb-3\"], [1, \"form-label\"], [\"type\", \"text\", \"disabled\", \"\", 1, \"form-control\", 3, \"value\"], [1, \"form-label\", \"d-block\"], [1, \"form-select\", \"w-100\", 3, \"ngModelChange\", \"ngModel\"], [3, \"value\", \"disabled\", 4, \"ngFor\", \"ngForOf\"], [1, \"text-center\", \"mt-4\"], [1, \"btn\", \"btn-primary\", 3, \"click\", \"disabled\"], [2, \"display\", \"inline-block\", \"width\", \"10px\"], [\"routerLink\", \"/admin/employees\", 1, \"btn\", \"btn-secondary\"], [1, \"alert\", \"alert-danger\"], [1, \"alert\", \"alert-warning\"], [3, \"value\", \"disabled\"]],\n        template: function TransferComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n            i0.ɵɵtext(2, \"Transfer Employee\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(3, \"div\", 2);\n            i0.ɵɵtemplate(4, TransferComponent_div_4_Template, 2, 1, \"div\", 3)(5, TransferComponent_div_5_Template, 2, 0, \"div\", 4);\n            i0.ɵɵelementStart(6, \"div\", 5)(7, \"label\", 6);\n            i0.ɵɵtext(8, \"Employee\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(9, \"input\", 7);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(10, \"div\", 5)(11, \"label\", 6);\n            i0.ɵɵtext(12, \"Current Department\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(13, \"input\", 7);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(14, \"div\", 5)(15, \"label\", 8);\n            i0.ɵɵtext(16, \"New Department\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(17, \"select\", 9);\n            i0.ɵɵtwoWayListener(\"ngModelChange\", function TransferComponent_Template_select_ngModelChange_17_listener($event) {\n              i0.ɵɵtwoWayBindingSet(ctx.newDepartmentId, $event) || (ctx.newDepartmentId = $event);\n              return $event;\n            });\n            i0.ɵɵtemplate(18, TransferComponent_option_18_Template, 2, 4, \"option\", 10);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(19, \"div\", 11)(20, \"button\", 12);\n            i0.ɵɵlistener(\"click\", function TransferComponent_Template_button_click_20_listener() {\n              return ctx.transfer();\n            });\n            i0.ɵɵtext(21, \"Transfer\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(22, \"span\", 13);\n            i0.ɵɵelementStart(23, \"button\", 14);\n            i0.ɵɵtext(24, \"Cancel\");\n            i0.ɵɵelementEnd()()()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.newDepartmentId === (ctx.employee == null ? null : ctx.employee.departmentId) && ctx.newDepartmentId !== null);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"value\", ctx.employee == null ? null : ctx.employee.employeeId);\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"value\", ctx.currentDepartmentName);\n            i0.ɵɵadvance(4);\n            i0.ɵɵtwoWayProperty(\"ngModel\", ctx.newDepartmentId);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngForOf\", ctx.departments);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"disabled\", ctx.newDepartmentId === (ctx.employee == null ? null : ctx.employee.departmentId) || !ctx.newDepartmentId);\n          }\n        },\n        dependencies: [i6.NgForOf, i6.NgIf, i7.NgSelectOption, i7.ɵNgSelectMultipleOption, i7.SelectControlValueAccessor, i7.NgControlStatus, i7.NgModel, i1.RouterLink],\n        styles: [\".form-label[_ngcontent-%COMP%] {\\n        font-weight: 500;\\n        margin-bottom: 0.5rem;\\n        display: block;\\n    }\\n    \\n    .form-select[_ngcontent-%COMP%] {\\n        padding: 0.5rem;\\n        border-radius: 0.25rem;\\n        border: 1px solid #ced4da;\\n        background-color: #fff;\\n        height: 38px;\\n        width: 100%;\\n        appearance: auto;\\n        -webkit-appearance: auto;\\n    }\"]\n      });\n    }\n  }\n  return TransferComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}