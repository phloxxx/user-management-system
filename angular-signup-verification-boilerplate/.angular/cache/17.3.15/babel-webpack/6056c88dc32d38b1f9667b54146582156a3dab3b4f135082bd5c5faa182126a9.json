{"ast":null,"code":"import { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@app/_services\";\nexport let JwtInterceptor = /*#__PURE__*/(() => {\n  class JwtInterceptor {\n    constructor(accountService) {\n      this.accountService = accountService;\n    }\n    intercept(request, next) {\n      // add authorization header with jwt token if account is logged in and request is to api url\n      const account = this.accountService.accountValue;\n      const isLoggedIn = account && account.jwtToken;\n      const isApiUrl = request.url.startsWith(environment.apiUrl);\n      console.log('JWT Interceptor - Request URL:', request.url);\n      console.log('JWT Interceptor - Is API URL:', isApiUrl);\n      console.log('JWT Interceptor - Is Logged In:', isLoggedIn);\n      if (isLoggedIn && isApiUrl) {\n        // Clone the request with the token in the Authorization header\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${account.jwtToken}`\n          }\n        });\n        // Enhanced logging\n        console.log('Sending authenticated request to:', request.url);\n        console.log('User role:', account.role);\n        // Don't log the actual token in production\n        const tokenPreview = account.jwtToken.substring(0, 15) + '...';\n        console.log('Token preview:', tokenPreview);\n        try {\n          // Check if token is parseable (for debugging)\n          const tokenParts = account.jwtToken.split('.');\n          if (tokenParts.length === 3) {\n            const payload = JSON.parse(atob(tokenParts[1]));\n            console.log('Token payload:', payload);\n            // Check token expiration\n            if (payload.exp) {\n              const expiryDate = new Date(payload.exp * 1000);\n              const now = new Date();\n              console.log('Token expires:', expiryDate);\n              console.log('Token expired:', expiryDate < now);\n            }\n          }\n        } catch (e) {\n          console.error('Error parsing token:', e);\n        }\n      } else if (!isLoggedIn && isApiUrl) {\n        console.warn('Making unauthenticated request to API URL:', request.url);\n      }\n      return next.handle(request);\n    }\n    static {\n      this.ɵfac = function JwtInterceptor_Factory(t) {\n        return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AccountService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: JwtInterceptor,\n        factory: JwtInterceptor.ɵfac\n      });\n    }\n  }\n  return JwtInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}