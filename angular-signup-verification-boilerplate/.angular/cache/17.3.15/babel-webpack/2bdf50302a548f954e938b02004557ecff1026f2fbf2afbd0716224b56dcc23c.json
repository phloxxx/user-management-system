{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, tap, first } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport { WorkflowService } from '@app/_services/workflow.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst baseUrl = `${environment.apiUrl}/employees`;\nexport let EmployeeService = /*#__PURE__*/(() => {\n  class EmployeeService {\n    constructor(http, injector) {\n      this.http = http;\n      this.injector = injector;\n    }\n    getAll() {\n      return this.http.get(baseUrl).pipe(tap(employees => console.log('Fetched employees:', employees)), catchError(this.handleError));\n    }\n    getById(id) {\n      return this.http.get(`${baseUrl}/${id}`).pipe(tap(employee => console.log('Fetched employee:', employee)), catchError(this.handleError));\n    }\n    create(params) {\n      console.log('Creating employee:', params);\n      return this.http.post(baseUrl, params).pipe(tap(employee => {\n        console.log('Created employee:', employee);\n        // Automatically create an onboarding workflow for the new employee\n        if (employee && employee.id) {\n          this.createOnboardingWorkflow(employee.id);\n        }\n      }), catchError(this.handleError));\n    }\n    update(id, params) {\n      console.log('Updating employee:', params);\n      return this.http.put(`${baseUrl}/${id}`, params).pipe(tap(employee => console.log('Updated employee:', employee)), catchError(this.handleError));\n    }\n    delete(id) {\n      return this.http.delete(`${baseUrl}/${id}`).pipe(tap(() => console.log('Deleted employee ID:', id)), catchError(this.handleError));\n    }\n    transfer(id, params) {\n      console.log('Transferring employee:', id, params);\n      return this.http.post(`${baseUrl}/${id}/transfer`, params).pipe(tap(response => console.log('Transferred employee:', response)), catchError(this.handleError));\n    }\n    getEmployeeWorkflows(id) {\n      return this.http.get(`${environment.apiUrl}/workflows/employee/${id}`).pipe(catchError(this.handleError));\n    }\n    // Error handling\n    handleError(error) {\n      console.error('API Error:', error);\n      let errorMessage = '';\n      if (error.error instanceof ErrorEvent) {\n        // Client-side error\n        errorMessage = `Error: ${error.error.message}`;\n      } else {\n        // Server-side error\n        if (error.error?.message) {\n          errorMessage = error.error.message;\n        } else if (error.status === 0) {\n          errorMessage = 'Cannot connect to server. Please check your internet connection.';\n        } else {\n          errorMessage = `Error Code: ${error.status}, Message: ${error.message}`;\n        }\n      }\n      return throwError(() => errorMessage);\n    }\n    // Add this helper method to create an onboarding workflow\n    createOnboardingWorkflow(employeeId) {\n      const workflowService = this.injector.get(WorkflowService);\n      workflowService.createOnboarding({\n        employeeId\n      }).pipe(first()).subscribe({\n        next: workflow => console.log('Created onboarding workflow:', workflow),\n        error: error => console.error('Error creating onboarding workflow:', error)\n      });\n    }\n    static {\n      this.ɵfac = function EmployeeService_Factory(t) {\n        return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i0.Injector));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: EmployeeService,\n        factory: EmployeeService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return EmployeeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}