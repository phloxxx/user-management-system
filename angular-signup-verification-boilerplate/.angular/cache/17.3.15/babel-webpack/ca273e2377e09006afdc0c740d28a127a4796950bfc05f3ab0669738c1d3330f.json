{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map, finalize } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nconst baseUrl = `${environment.apiUrl}/accounts`;\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.accountSubject = new BehaviorSubject(null);\n      this.account = this.accountSubject.asObservable();\n    }\n    get accountValue() {\n      return this.accountSubject.value;\n    }\n    login(email, password) {\n      return this.http.post(`${environment.apiUrl}/accounts/authenticate`, {\n        email,\n        password\n      }).pipe(map(response => {\n        // Check if non-admin account is active before allowing login\n        if (response.role !== 'Admin' && !response.isActive) {\n          throw new Error('Your account has been deactivated. Please contact an administrator.');\n        }\n        // Authentication successful\n        this.accountSubject.next(response);\n        this.startRefreshTokenTimer();\n        return response;\n      }));\n    }\n    logout() {\n      this.http.post(`${baseUrl}/revoke-token`, {}, {\n        withCredentials: true\n      }).subscribe();\n      this.stopRefreshTokenTimer();\n      this.accountSubject.next(null);\n      this.router.navigate(['/account/login']);\n    }\n    refreshToken() {\n      return this.http.post(`${baseUrl}/refresh-token`, {}, {\n        withCredentials: true\n      }).pipe(map(account => {\n        this.accountSubject.next(account);\n        this.startRefreshTokenTimer();\n        return account;\n      }));\n    }\n    register(account) {\n      return this.http.post(`${baseUrl}/register`, account);\n    }\n    verifyEmail(token) {\n      return this.http.post(`${baseUrl}/verify-email`, {\n        token\n      });\n    }\n    forgotPassword(email) {\n      return this.http.post(`${baseUrl}/forgot-password`, {\n        email\n      });\n    }\n    validateResetToken(token) {\n      return this.http.post(`${baseUrl}/validate-reset-token`, {\n        token\n      });\n    }\n    resetPassword(token, password, confirmPassword) {\n      return this.http.post(`${baseUrl}/reset-password`, {\n        token,\n        password,\n        confirmPassword\n      });\n    }\n    getAll() {\n      return this.http.get(baseUrl);\n    }\n    getById(id) {\n      return this.http.get(`${baseUrl}/${id}`);\n    }\n    create(params) {\n      return this.http.post(baseUrl, params);\n    }\n    update(id, params) {\n      return this.http.put(`${baseUrl}/${id}`, params).pipe(map(account => {\n        // update the current account if it was updated\n        if (account.id === this.accountValue.id) {\n          // publish updated account to subscribers\n          account = {\n            ...this.accountValue,\n            ...account\n          };\n          this.accountSubject.next(account);\n        }\n        return account;\n      }));\n    }\n    delete(id) {\n      return this.http.delete(`${baseUrl}/${id}`).pipe(finalize(() => {\n        // auto logout if the logged in account deleted their own record\n        if (id === this.accountValue.id) this.logout();\n      }));\n    }\n    updateStatus(id, isActive) {\n      return this.http.put(`${baseUrl}/${id}/status`, {\n        isActive\n      }).pipe(map(account => {\n        // If we're updating the current user, update the subject\n        if (account.id === this.accountValue.id) {\n          // publish updated account to subscribers\n          account = {\n            ...this.accountValue,\n            ...account\n          };\n          this.accountSubject.next(account);\n        }\n        return account;\n      }));\n    }\n    startRefreshTokenTimer() {\n      try {\n        // parse json object from base64 encoded jwt token\n        const jwtToken = JSON.parse(atob(this.accountValue.jwtToken.split('.')[1]));\n        // set a timeout to refresh the token a minute before it expires\n        const expires = new Date(jwtToken.exp * 1000);\n        const timeout = expires.getTime() - Date.now() - 60 * 1000;\n        // Make sure we don't set a negative timeout\n        if (timeout > 0) {\n          console.log(`Token refresh scheduled in ${Math.round(timeout / 1000)} seconds`);\n          this.refreshTokenTimeout = setTimeout(() => {\n            console.log('Refreshing token...');\n            this.refreshToken().subscribe({\n              next: () => console.log('Token refreshed successfully'),\n              error: error => console.error('Token refresh failed:', error)\n            });\n          }, timeout);\n        } else {\n          // Token already expired, try to refresh immediately\n          console.log('Token already expired, refreshing immediately');\n          this.refreshToken().subscribe();\n        }\n      } catch (error) {\n        console.error('Error starting token refresh timer:', error);\n      }\n    }\n    stopRefreshTokenTimer() {\n      if (this.refreshTokenTimeout) {\n        clearTimeout(this.refreshTokenTimeout);\n        this.refreshTokenTimeout = null;\n      }\n    }\n    static {\n      this.ɵfac = function AccountService_Factory(t) {\n        return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AccountService,\n        factory: AccountService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}